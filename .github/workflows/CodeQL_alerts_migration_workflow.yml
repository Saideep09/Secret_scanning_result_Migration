name: Migrate Code Scanning Alerts

on:
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  Downloading_from_source:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install jq (if not available)
        run: sudo apt-get install -y jq

      - name: Create SARIF directory
        run: mkdir -p sarif_reports

      - name: Set up GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y
        env:
          GH_TOKEN: ${{ secrets.SOURCE_TOKEN }} 
      
      - name: List and download SARIF files from the source repository
        env:
          GH_TOKEN: ${{ secrets.SOURCE_TOKEN }}
        run: |
          gh api -X GET /repos/saideep11111/source1/code-scanning/alerts
      
      - name: Fetch alerts from source repository
        id: fetch_alerts
        env:
          GH_TOKEN: ${{ secrets.SOURCE_TOKEN }}
        run: |
          # Get alerts from the source repository and save them to alerts.json
          gh api -X GET "/repos/saideep11111/source1/code-scanning/alerts" > alerts.json

      - name: Get Latest Commit SHA from Target Repository
        env:
          GH_TOKEN: ${{ secrets.TARGET_TOKEN }}
        run: |
          TARGET_REPO="saideep11112/target1"
          TARGET_BRANCH=$(gh api -X GET "/repos/$TARGET_REPO" --jq '.default_branch')

          # Check if the branch has commits; fetch the latest commit SHA if available
          latest_commit_sha=$(gh api -X GET "/repos/$TARGET_REPO/commits/$TARGET_BRANCH" --jq '.sha' || echo "null")
          
          # If no commit SHA is found, print a message and exit gracefully
          if [ "$latest_commit_sha" == "null" ]; then
            echo "No commits found on the branch $TARGET_BRANCH. Please add a commit to proceed."
            exit 1
          fi

          # Save commit SHA to environment variable
          echo "LATEST_COMMIT_SHA=$latest_commit_sha" >> $GITHUB_ENV

      - name: Format, compress, and encode alerts as SARIF for upload to target repository
        env:
          GH_TOKEN: ${{ secrets.TARGET_TOKEN }}
        run: |
          TARGET_REPO="saideep11112/target1"
          
          # Loop over each alert, convert to SARIF format, gzip, and base64 encode
          cat alerts.json | jq -c '.[]' | while read -r alert; do
            sarif=$(jq -n \
              --argjson alert "$alert" \
              '{
                "version": "2.1.0",
                "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json",
                "runs": [{
                  "tool": {
                    "driver": {
                      "name": "Manual Alert Migration",
                      "rules": [{
                        "id": $alert.rule.id,
                        "name": $alert.rule.name,
                        "fullDescription": { "text": $alert.rule.full_description },
                        "help": { "text": $alert.rule.help },
                        "properties": { "tags": $alert.rule.tags }
                      }]
                    }
                  },
                  "results": [{
                    "ruleId": $alert.rule.id,
                    "level": $alert.rule.severity,
                    "message": { "text": $alert.rule.description },
                    "locations": [{
                      "physicalLocation": {
                        "artifactLocation": { "uri": $alert.location.path },
                        "region": { "startLine": ($alert.location.start_line // 1) }
                      }
                    }]
                  }]
                }]
              }')

            # Save SARIF content to a file
            echo "$sarif" > temp.sarif
            
            # Compress the SARIF file
            gzip -c temp.sarif > temp.sarif.gz
            
            # Base64 encode the compressed SARIF file
            sarif_base64=$(base64 -w 0 temp.sarif.gz)
            
            # Upload SARIF data to the target repository using the latest commit SHA
            gh api -X POST \
              -H "Authorization: token $GH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "/repos/$TARGET_REPO/code-scanning/sarifs" \
              -F "commit_sha=$LATEST_COMMIT_SHA" \
              -F "ref=refs/heads/$TARGET_BRANCH" \
              -F "sarif=$sarif_base64"
          done
