name: Migrate Code Scanning Alerts

on:
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  Downloading_from_source:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install jq (if not available)
        run: sudo apt-get install -y jq

      - name: Create SARIF directory
        run: mkdir -p sarif_reports

      - name: Set up GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y
        env:
          GH_TOKEN: ${{ secrets.SOURCE_TOKEN }} 
      
      - name: List and download SARIF files from the source repository
        env:
          GH_TOKEN: ${{ secrets.SOURCE_TOKEN }}
        run: |
          gh api -X GET /repos/Saideep09/zxing-sample-java/code-scanning/alerts

      - name: Fetch and save code scanning alerts as SARIF
        env:
          GH_TOKEN: ${{ secrets.SOURCE_TOKEN }}
        run: |
          # Fetch alerts data from the GitHub API
          alerts=$(gh api -X GET "/repos/Saideep09/zxing-sample-java/code-scanning/alerts" --jq '.')
    
          # Convert alerts data to SARIF format
          sarif_content=$(jq -n \
            --argjson runs "[{
              \"tool\": {
                \"driver\": {
                  \"name\": \"GitHub Code Scanning Alerts\",
                  \"rules\": ($alerts | map({
                    \"id\": .rule.id,
                    \"name\": .rule.name,
                    \"fullDescription\": {\"text\": .rule.full_description},
                    \"help\": {\"text\": .rule.help},
                    \"properties\": {
                      \"tags\": .rule.tags,
                      \"severity\": .rule.severity
                    }
                  }))
                }
              },
              \"results\": ($alerts | map({
                \"ruleId\": .rule.id,
                \"level\": .rule.severity,
                \"message\": {\"text\": .rule.description},
                \"locations\": [{
                  \"physicalLocation\": {
                    \"artifactLocation\": {\"uri\": .html_url},
                    \"region\": {\"startLine\": 1}
                  }
                }]
              }))
            }]" \
            '{
              "version": "2.1.0",
              "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json",
              "runs": $runs
            }')
    
          # Save SARIF content to a file
          echo "$sarif_content" > code_scanning_alerts.sarif
          echo "SARIF file created: code_scanning_alerts.sarif"

      - name: Upload SARIF file
        uses: actions/upload-artifact@v3
        with:
          name: code-scanning-alerts-sarif
          path: code_scanning_alerts.sarif
